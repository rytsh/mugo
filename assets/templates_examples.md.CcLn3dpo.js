import{_ as s,c as n,a0 as e,o as p}from"./chunks/framework.iBbVlLT2.js";const b=JSON.parse('{"title":"Core Functionality","description":"","frontmatter":{},"headers":[],"relativePath":"templates/examples.md","filePath":"templates/examples.md"}'),l={name:"templates/examples.md"};function t(o,a,c,i,d,r){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="core-functionality" tabindex="-1">Core Functionality <a class="header-anchor" href="#core-functionality" aria-label="Permalink to &quot;Core Functionality&quot;">​</a></h1><p>Before to check examples, we need to know about comments and whitespace.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{/* a comment */}}</span></span>
<span class="line"><span>{{- /* a comment with white space trimmed from preceding and following text */ -}}</span></span>
<span class="line"><span>	A comment; discarded. May contain newlines.</span></span>
<span class="line"><span>	Comments do not nest and must start and end at the</span></span>
<span class="line"><span>	delimiters, as shown here.</span></span></code></pre></div><p>Minus sign (-) is a special character that represents white space trimming.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Merhaba</span></span>
<span class="line"><span></span></span>
<span class="line"><span> 	{{- &quot; &quot; -}}</span></span>
<span class="line"><span>  	       dünya!</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Merhaba dünya!</span></span></code></pre></div><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-label="Permalink to &quot;Variables&quot;">​</a></h2><p>Inside of template, we can use variables. Variables are defined by <strong>$variableName := value</strong> syntax.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{ $x := &quot;Merhaba&quot; -}}</span></span>
<span class="line"><span>{{ $x }} dünya!</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Merhaba dünya!</span></span></code></pre></div><h2 id="for-loop" tabindex="-1">For loop <a class="header-anchor" href="#for-loop" aria-label="Permalink to &quot;For loop&quot;">​</a></h2><p>If you have a list of items, you can iterate over them using the <code>range</code> function.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">list</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#FF79C6;">-</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">item-1</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;">-</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">item-2</span><span style="color:#E9F284;">&quot;</span></span></code></pre></div><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Range of list</span></span>
<span class="line"><span>{{ range $index, $element := .list -}}</span></span>
<span class="line"><span>{{ $index }}: {{ $element }}</span></span>
<span class="line"><span>{{ end }}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Range of list</span></span>
<span class="line"><span>0: item-1</span></span>
<span class="line"><span>1: item-2</span></span></code></pre></div><p>If we want to for loop with a map, in that time $index is a key of map and $element is a value of map.</p><p>We can also use <code>range</code> to count up to a number. But we need to use <code>until</code> function and it&#39;s a part of <code>sprig</code> functions. Mugo has a <code>sprig</code> function set by default so we can use it.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Count up to 5</span></span>
<span class="line"><span>{{ range $index, $element := until 5 -}}</span></span>
<span class="line"><span>{{ $index }}: {{ $element }}</span></span>
<span class="line"><span>{{ end }}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Count up to 5</span></span>
<span class="line"><span>0: 0</span></span>
<span class="line"><span>1: 1</span></span>
<span class="line"><span>2: 2</span></span>
<span class="line"><span>3: 3</span></span>
<span class="line"><span>4: 4</span></span></code></pre></div><h2 id="if-statement" tabindex="-1">If statement <a class="header-anchor" href="#if-statement" aria-label="Permalink to &quot;If statement&quot;">​</a></h2><p>Binary check functions <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, <code>ge</code> but arguments should comparable types and result is boolean.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">result</span><span style="color:#FF79C6;">:</span><span style="color:#BD93F9;"> 10</span></span></code></pre></div><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{if eq .result 10 -}}</span></span>
<span class="line"><span>Result is 10</span></span>
<span class="line"><span>{{- else if eq .result 0 -}}</span></span>
<span class="line"><span>Result is 0</span></span>
<span class="line"><span>{{- else -}}</span></span>
<span class="line"><span>unknown</span></span>
<span class="line"><span>{{- end}}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Result is 10</span></span></code></pre></div><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><p>We can use <code>index</code> function to get an item from a list.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">list</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#FF79C6;"> -</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">item-1</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#FF79C6;"> -</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">item-2</span><span style="color:#E9F284;">&quot;</span></span></code></pre></div><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>First item of list: {{ index .list 0 }}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>First item of list: item-1</span></span></code></pre></div><h2 id="define" tabindex="-1">Define <a class="header-anchor" href="#define" aria-label="Permalink to &quot;Define&quot;">​</a></h2><p>We can use define to define a template and use it later with <code>template</code> function and giving variables.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{- define &quot;hello&quot; -}}</span></span>
<span class="line"><span>Hello {{ .name }}</span></span>
<span class="line"><span>{{- end -}}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{{ template &quot;hello&quot; . }}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Merhaba dünya!</span></span></code></pre></div><h2 id="with" tabindex="-1">With <a class="header-anchor" href="#with" aria-label="Permalink to &quot;With&quot;">​</a></h2><p>Use with to limit the scope of a variable inside of a template.</p><p>If <code>name</code> value is empty, it will not print anything.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{ with .name -}}</span></span>
<span class="line"><span>Merhaba {{ . }}</span></span>
<span class="line"><span>{{- end }}</span></span></code></pre></div><p>If we want to reach outer scope, we can use <code>$.</code> syntax.</p><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{ with .name -}}</span></span>
<span class="line"><span>Item {{ . }} value is {{ $.value }}</span></span>
<span class="line"><span>{{- end }}</span></span></code></pre></div><hr><h1 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h1><p>Some useful examples with templates.</p><h2 id="sum-of-variables" tabindex="-1">Sum of variables <a class="header-anchor" href="#sum-of-variables" aria-label="Permalink to &quot;Sum of variables&quot;">​</a></h2><p><code>addf</code> function is a part of <code>sprig</code> functions. It uses decimal library to calculate floating point numbers.</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span style="color:#8BE9FD;">values</span><span style="color:#FF79C6;">:</span></span>
<span class="line"><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;"> 6.1</span></span>
<span class="line"><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;"> 5.81</span></span>
<span class="line"><span style="color:#FF79C6;"> -</span><span style="color:#BD93F9;"> 7.9</span></span></code></pre></div><div class="language-tpl"><button title="Copy Code" class="copy"></button><span class="lang">tpl</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>{{ $sum := 0 -}}</span></span>
<span class="line"><span>{{ range $index, $element := .values -}}</span></span>
<span class="line"><span>{{ $sum = addf $sum $element -}}</span></span>
<span class="line"><span>{{ end -}}</span></span>
<span class="line"><span>Total value {{ $sum }}</span></span></code></pre></div><p>Output:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki dracula vp-code" tabindex="0"><code><span class="line"><span>Total value 19.81</span></span></code></pre></div>`,55)]))}const m=s(l,[["render",t]]);export{b as __pageData,m as default};
